extern crate openssl;
extern crate time;

use openssl::ec::{EcKey,EcGroup,PointConversionForm};
use openssl::nid::Nid;
use openssl::bn::BigNumContext;

mod hash;
mod base58;

use hash::hash256;
use hash::hash160;
use base58::from_bytes;
//const SIZE: usize = 32;


fn main() {
  openssl::init();

  let vanity = String::from("14Ru");
  let group = EcGroup::from_curve_name(Nid::SECP256K1).unwrap(); 
  let mut ctx = BigNumContext::new().unwrap();

  let mut i = 0;
  loop {

    let key = EcKey::generate(&group).unwrap();
    assert!(key.check_key().unwrap() == ()); // returns Result<(), ErrorStack>
    let bytes = key.public_key().to_bytes(&group, PointConversionForm::COMPRESSED, &mut ctx).unwrap();
    //println!("pubkey {:?}", bytes);

    let mut data = hash160(&bytes);
    //let mut data = [0; 20].to_vec();
    
    // prepend network byte
    data.insert(0, 0);
    //let check = sha::sha256(&sha::sha256(&data1[..]));
    let check = hash256(&data);
    // append checksum...
    let addr = [&data[..], &check[0..4]].concat();
    //Base58_fromBytes(hash.to_vec());
    let a = from_bytes(addr);
    let cmp = &a[..vanity.len()];
    //println!("11111111111111111111111111114oLvT2\n{}", a);
    //println!("{}", a);
    i += 1;
    if vanity == cmp {
      println!("{} {}", i, a);
      break;
    }
  }
}


// zero PKH: 111111111111111111114oLvT2
// 1GGZnReKybChriBrvxEDWsQqQJBLQHvRzW
// priv [0x00, 0x94, 0x19, 0x9c, 0x35, 0xc8, 0x84, 0x8e, 0x03, 0xe9, 0xcb, 0x43, 0x80, 0xef, 0x71, 0x2b, 0xc0, 0x77, 0xa5, 0x99, 0x1f, 0xa0, 0xbb, 0xf2, 0xc4, 0xa4, 0x0b, 0x03, 0x53, 0xe3, 0xad, 0x6c, 0x27]
// pub [0x04, 0xf6, 0x75, 0x5a, 0xfd, 0x57, 0xb6, 0xda, 0x43, 0xe8, 0xee, 0xc8, 0x14, 0x4b, 0x5e, 0xfe, 0x63, 0xf9, 0x02, 0xcc, 0xc1, 0x98, 0x04, 0x61, 0xfc, 0x66, 0x43, 0x56, 0x71, 0xf5, 0x4b, 0xea, 0x02, 0x14, 0x7c, 0x8f, 0x92, 0x4a, 0x1e, 0x7c, 0xbe, 0x66, 0xe6, 0xcd, 0xf0, 0x65, 0x32, 0x13, 0x63, 0x51, 0xd8, 0x86, 0x46, 0x80, 0x94, 0xa9, 0x3f, 0x89, 0xe9, 0x94, 0xfa, 0x8e, 0xbb, 0xd0, 0x80]
// pub [0x02, 0xf6, 0x75, 0x5a, 0xfd, 0x57, 0xb6, 0xda, 0x43, 0xe8, 0xee, 0xc8, 0x14, 0x4b, 0x5e, 0xfe, 0x63, 0xf9, 0x02, 0xcc, 0xc1, 0x98, 0x04, 0x61, 0xfc, 0x66, 0x43, 0x56, 0x71, 0xf5, 0x4b, 0xea, 0x02]

